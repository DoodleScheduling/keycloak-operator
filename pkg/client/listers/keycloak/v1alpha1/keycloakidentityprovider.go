// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/keycloak/keycloak-operator/pkg/apis/keycloak/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeycloakIdentityProviderLister helps list KeycloakIdentityProviders.
// All objects returned here must be treated as read-only.
type KeycloakIdentityProviderLister interface {
	// List lists all KeycloakIdentityProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeycloakIdentityProvider, err error)
	// KeycloakIdentityProviders returns an object that can list and get KeycloakIdentityProviders.
	KeycloakIdentityProviders(namespace string) KeycloakIdentityProviderNamespaceLister
	KeycloakIdentityProviderListerExpansion
}

// keycloakIdentityProviderLister implements the KeycloakIdentityProviderLister interface.
type keycloakIdentityProviderLister struct {
	indexer cache.Indexer
}

// NewKeycloakIdentityProviderLister returns a new KeycloakIdentityProviderLister.
func NewKeycloakIdentityProviderLister(indexer cache.Indexer) KeycloakIdentityProviderLister {
	return &keycloakIdentityProviderLister{indexer: indexer}
}

// List lists all KeycloakIdentityProviders in the indexer.
func (s *keycloakIdentityProviderLister) List(selector labels.Selector) (ret []*v1alpha1.KeycloakIdentityProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeycloakIdentityProvider))
	})
	return ret, err
}

// KeycloakIdentityProviders returns an object that can list and get KeycloakIdentityProviders.
func (s *keycloakIdentityProviderLister) KeycloakIdentityProviders(namespace string) KeycloakIdentityProviderNamespaceLister {
	return keycloakIdentityProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeycloakIdentityProviderNamespaceLister helps list and get KeycloakIdentityProviders.
// All objects returned here must be treated as read-only.
type KeycloakIdentityProviderNamespaceLister interface {
	// List lists all KeycloakIdentityProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeycloakIdentityProvider, err error)
	// Get retrieves the KeycloakIdentityProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeycloakIdentityProvider, error)
	KeycloakIdentityProviderNamespaceListerExpansion
}

// keycloakIdentityProviderNamespaceLister implements the KeycloakIdentityProviderNamespaceLister
// interface.
type keycloakIdentityProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeycloakIdentityProviders in the indexer for a given namespace.
func (s keycloakIdentityProviderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeycloakIdentityProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeycloakIdentityProvider))
	})
	return ret, err
}

// Get retrieves the KeycloakIdentityProvider from the indexer for a given namespace and name.
func (s keycloakIdentityProviderNamespaceLister) Get(name string) (*v1alpha1.KeycloakIdentityProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("keycloakidentityprovider"), name)
	}
	return obj.(*v1alpha1.KeycloakIdentityProvider), nil
}
